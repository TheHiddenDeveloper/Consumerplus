import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../services/db_service.dart';
import '../../models/appliance.dart';

class AddApplianceScreen extends StatefulWidget {
  const AddApplianceScreen({super.key});

  @override
  _AddApplianceScreenState createState() => _AddApplianceScreenState();
}

class _AddApplianceScreenState extends State<AddApplianceScreen> {
  final TextEditingController _applianceNameController = TextEditingController();
  final TextEditingController _powerController = TextEditingController();
  final TextEditingController _hoursController = TextEditingController();
  String _consumerType = 'Residential';
  bool _isExclusive = false;

  void _addAppliance() async {
    final String name = _applianceNameController.text;
    final double power = double.tryParse(_powerController.text) ?? 0;
    final double hours = double.tryParse(_hoursController.text) ?? 0;

    if (name.isNotEmpty && power > 0 && hours > 0) {
      try {
        final dbService = Provider.of<DBService>(context, listen: false);
        final appliance = Appliance(
          id: '', // ID will be auto-generated by Firestore
          name: name,
          power: power,
          hoursPerDay: hours,
          consumerType: _consumerType,
          isExclusive: _isExclusive,
        );

        await dbService.addAppliance(appliance);
        Navigator.pop(context);
      } catch (e) {
        print('Error adding appliance: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding appliance: $e')),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Please fill in all fields with valid values')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Appliance')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: _applianceNameController,
              decoration: const InputDecoration(
                labelText: 'Appliance Name',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.device_hub),
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _powerController,
              decoration: const InputDecoration(
                labelText: 'Power (W)',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.power),
              ),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _hoursController,
              decoration: const InputDecoration(
                labelText: 'Usage Hours per Day',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.timer),
              ),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 12),
            DropdownButtonFormField<String>(
              value: _consumerType,
              decoration: const InputDecoration(
                labelText: 'Consumer Type',
                border: OutlineInputBorder(),
              ),
              onChanged: (String? newValue) {
                setState(() {
                  _consumerType = newValue!;
                  if (_consumerType == 'Non-Residential') {
                    _isExclusive = false;
                  }
                });
              },
              items: <String>['Residential', 'Non-Residential']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            if (_consumerType == 'Residential')
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text('Exclusive'),
                  Checkbox(
                    value: _isExclusive,
                    onChanged: (bool? newValue) {
                      setState(() {
                        _isExclusive = newValue!;
                      });
                    },
                  ),
                ],
              ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _addAppliance,
              child: const Text('Add Appliance'),
            ),
          ],
        ),
      ),
    );
  }
}
